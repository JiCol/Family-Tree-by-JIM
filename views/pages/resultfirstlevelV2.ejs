<!DOCTYPE html>
<html lang="en">
<head>
    <%- include('../partials/result'); %>
</head>
<body class="container">
<header>
    <%- include('../partials/header'); %>
</header>
<main>
<div class="row">
  <div class="col-sm-12">
    <div class="jumbotron">
      <h2>Ургийн мод - Нэг үе харуулах</h2>
      <svg width="100%" height="600" style="background-color: #909aa4;"></svg>

      <script src="https://d3js.org/d3.v4.min.js" type="text/javascript"></script>
      <script src="https://d3js.org/d3-selection-multi.v1.js"></script>
      <script>
          console.log()
        let parentz  = <%-JSON.stringify(persons)%>;
        let childs   = <%-JSON.stringify(guys)%>;
        let brothers = <%-JSON.stringify(brothers)%>;
        let r        = <%-JSON.stringify(r)%>;
         </script>
      <script src="javascripts/firstlevelV2.js"></script>
      <script type="text/javascript">
    var colors = d3.scaleOrdinal(d3.schemeCategory10);
      var svg = d3.select("svg"),
          width = svg._groups[0][0].clientWidth,
          height = 600,
          node,
          link;
      svg.append('defs').append('marker')
          .attrs({'id':'arrowhead',
              'viewBox':'-0 -5 10 10',
              'refX':21,
              'refY':0,
              'orient':'auto',
              'markerWidth':10,
              'markerHeight':7,
              'xoverflow':'visible'})
          .append('svg:path')
          .attr('d', 'M 0,-5 L 10 ,0 L 0,5')
          .attr('fill', '#FFFFFF')
          .style('stroke','none');
      
      var simulation = d3.forceSimulation()
          .force("link", d3.forceLink().id(function (d) {return d.id;}).distance([100]).strength(0.01))
          .force("charge", d3.forceManyBody())
          .force("center", d3.forceCenter(width / 2, height / 2))
          .force('collide', d3.forceCollide(function(d){
      return d.id === "j" ? 100 : 75
      }));
      
      // d3.json("graph1.json", function (error, graph) {
      //     if (error) throw error;
      //     update(graph.links, graph.nodes);
      // })
      var graph = naruto;
      console.log(graph);
          function update(links, nodes) {

link = svg.selectAll(".link")
    .data(links)
    .enter()
    .append("line")
    .attr("class", "link")
    .attr('marker-end','url(#arrowhead)')

link.append("title")
    .text(function (d) {return d.type;});

edgepaths = svg.selectAll(".edgepath")
    .data(links)
    .enter()
    .append('path')
    .attrs({
        'class': 'edgepath',
        'fill-opacity': 0,
        'stroke-opacity': 0,
        'id': function (d, i) {return 'edgepath' + i}
    })
    .style("pointer-events", "none");

edgelabels = svg.selectAll(".edgelabel")
    .data(links)
    .enter()
    .append('text')
    .style("pointer-events", "none")
    .attrs({
        'class': 'edgelabel',
        'id': function (d, i) {return 'edgelabel' + i},
        'font-size': 12,
        'fill': '#FFFFFF',
        'opacity': 1
    });

edgelabels.append('textPath')
    .attr('xlink:href', function (d, i) {return '#edgepath' + i})
    .style("text-anchor", "middle")
    .style("pointer-events", "none")
    .attr("startOffset", "50%")
    .text(function (d) {return d.type});

node = svg.selectAll(".node")
    .data(nodes)
    .enter()
    .append("g")
    .attr("class", "node")
    .call(d3.drag()
            .on("start", dragstarted)
            .on("drag", dragged)
            //.on("end", dragended)
    );
    
    let div = d3.select("body").append("div")	
      .attr("class", "tooltip")				
      .style("opacity", 0);

node.append("circle")
    .on("click", click)
    .attr("r", 18)
    .style("fill", function (d, i) {return colors(d.group);})
    .on("mouseover", function(d) {		
          div.style("opacity", .9);	
div.html("Овог: " + d.lname
+ "</br>" + "Нэр: " + d.name
+ "</br>" + "Регистр: " + d.register
+ "</br>" + "dob: " + d.dob
+ "</br>" + "Хүйс: " + d.label)	
.style("left", (d3.event.pageX) + "px")		
.style("top", (d3.event.pageY - 28) + "px");	
})					
.on("mouseout", function(d) {		
div.style("opacity", 0);	
});


function click(d){



  if (!d3.select(this).classed("selected")) {
       d3.select(this)
           .style('stroke', 'black')
           .classed("selected",true)
           document.getElementById("func1").value=d.register; 
           document.getElementById("func2").value=d.register; 


//    var nodes = new Array(this.size()), i = -1;
//    this.each(function() {d3.select(this)
//           .style('stroke', 'white')
//           .classed("selected",false); });
  }
  else {
      d3.select(this)
          .style('stroke', 'white')
          .classed("selected",false);
  }
}


node.append("title")
    .text(function (d) {return d.id;});

node.append("text")
    .attr("dy", 0)
    .attr("dx", -5)
    .style("fill", "#FFFFFF")
    .style("font-size", "14")
    .style("opacity","1")
    .text(function (d) {return d.name;});
    // .text(function (d) {return d.name+":"+d.label;});

simulation
    .nodes(nodes)
    .on("tick", ticked);

simulation.force("link")
    .links(links);
}
          update(naruto.links, naruto.nodes);
 
      function ticked() {
          link
              .attr("x1", function (d) {return d.source.x;})
              .attr("y1", function (d) {return d.source.y;})
              .attr("x2", function (d) {return d.target.x;})
              .attr("y2", function (d) {return d.target.y;});
      
          node
              .attr("transform", function (d) {return "translate(" + d.x + ", " + d.y + ")";});
      
          edgepaths.attr('d', function (d) {
              return 'M ' + d.source.x + ' ' + d.source.y + ' L ' + d.target.x + ' ' + d.target.y;
          });
      
          edgelabels.attr('transform', function (d) {
              if (d.target.x < d.source.x) {
                  var bbox = this.getBBox();
      
                  rx = bbox.x + bbox.width / 2;
                  ry = bbox.y + bbox.height / 2;
                  return 'rotate(180 ' + rx + ' ' + ry + ')';
              }
              else {
                  return 'rotate(0)';
              }
          });
      }
      
      function dragstarted(d) {
          if (!d3.event.active) simulation.alphaTarget(0.3).restart()
          d.fx = d.x;
          d.fy = d.y;
      }
      
      function dragged(d) {
          d.fx = d3.event.x;
          d.fy = d3.event.y;
      }
      
      function dragended(d) {
         if (!d3.event.active) simulation.alphaTarget(0);
         d.fx = undefined;
         d.fy = undefined;
      }
      
      </script>
    <form method="get" action="/resultfirstlevelV2">
      <div class="btn-group" role="group" aria-label="Basic example">
        <input type="text" class="form-control" name="S1" id="func1" hidden />
        <input type="text" class="form-control" name="funcType" value="1" hidden />
        <input type="text" class="form-control" name="R" id="something" value="" hidden />
        <button type="submit" class="btn btn-dark">Эцэг эх харуулах</button>
    </form>
    <form method="get" action="/resultfirstlevelV2">
        <div class="btn-group" role="group" aria-label="Basic example">
          <input type="text" class="form-control" name="S1" id="func2" hidden />
          <input type="text" class="form-control" name="funcType" value="2" hidden />
          <input type="text" class="form-control" name="R" id="something" value="" hidden />
          <button type="submit" class="btn btn-light">Ах дүүс харуулах</button>
      </form>
    </div>
    </div>
  </div>
</div>
<script>
          document.getElementById("something").value=JSON.stringify(naruto);   
</script>
</main>

<footer>
    <%- include('../partials/footer'); %>
</footer>

</body>
</html>
