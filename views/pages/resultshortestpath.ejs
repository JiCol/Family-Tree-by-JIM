<!DOCTYPE html>
<html lang="en">
<head>
    <%- include('../partials/result'); %>
</head>
<body class="container">
<header>
    <%- include('../partials/header'); %>
</header>
<main>
<div class="row">
  <div class="col-sm-12">
    <div class="jumbotron">
      <h2>Ургийн мод - Холбоо хамаарал харуулах</h2>
      <svg width="100%" height="600" style="background-color: #909aa4;"></svg>

      <script src="https://d3js.org/d3.v4.min.js" type="text/javascript"></script>
      <script src="https://d3js.org/d3-selection-multi.v1.js"></script>
      <script>
        let childs = <%-JSON.stringify(persons)%>;
      </script>
      
      <script src="javascripts/shortestpath.js"></script>
      <script type="text/javascript">
          
      var colors = d3.scaleOrdinal(d3.schemeCategory10);
      
      var svg = d3.select("svg"),
          width = svg._groups[0][0].clientWidth,
          height = 600,
          node,
          link;
  
          
    //   svg.append('defs').append('marker')
    //       .attrs({'id':'arrowhead',
    //           'viewBox':'-0 -5 10 10',
    //           'refX':13,
    //           'refY':0,
    //           'orient':'auto',
    //           'markerWidth':10,
    //           'markerHeight':10,
    //           'xoverflow':'visible'})
    //       .append('svg:path')
    //       .attr('d', 'M 0,-5 L 10 ,0 L 0,5')
    //       .attr('fill', '#ffffff')
    //       .style('stroke','none');
    svg.append('defs').append('marker')
          .attrs({'id':'arrowhead',
              'viewBox':'-0 -5 10 10',
              'refX':21,
              'refY':0,
              'orient':'auto',
              'markerWidth':10,
              'markerHeight':7,
              'xoverflow':'visible'})
          .append('svg:path')
          .attr('d', 'M 0,-5 L 10 ,0 L 0,5')
          .attr('fill', '#FFFFFF')
          .style('stroke','none');
      
      var simulation = d3.forceSimulation()
          .force("link", d3.forceLink().id(function (d) {return d.id;}).distance([150]).strength(1.5))
          .force("charge", d3.forceManyBody())
          .force("center", d3.forceCenter(width / 2, height / 2))
          .force('collide', d3.forceCollide(function(d){
      return d.id === "j" ? 150 : 100
      }));
      
      // d3.json("graph1.json", function (error, graph) {
      //     if (error) throw error;
      //     update(graph.links, graph.nodes);
      // })
      
          var graph = naruto;
          update(naruto.links, naruto.nodes);
      function update(links, nodes) {
          link = svg.selectAll(".link")
              .data(links)
              .enter()
              .append("line")
              .attr("class", "link")
              .attr('marker-end','url(#arrowhead)')
      
          link.append("title")
              .text(function (d) {return d.type;});
      
          edgepaths = svg.selectAll(".edgepath")
              .data(links)
              .enter()
              .append('path')
              .attrs({
                  'class': 'edgepath',
                  'fill-opacity': 0,
                  'stroke-opacity': 0,
                  'id': function (d, i) {return 'edgepath' + i}
              })
              .style("pointer-events", "none");
      
          edgelabels = svg.selectAll(".edgelabel")
              .data(links)
              .enter()
              .append('text')
              .style("pointer-events", "none")
              .attrs({
                  'class': 'edgelabel',
                  'id': function (d, i) {return 'edgelabel' + i},
                  'font-size': 12,
                  'fill': '#FFFFFF',
                  'opacity': 1
              });
      
          edgelabels.append('textPath')
              .attr('xlink:href', function (d, i) {return '#edgepath' + i})
              .style("text-anchor", "middle")
              .style("pointer-events", "none")
              .attr("startOffset", "50%")
              .text(function (d) {return d.type});
      
          node = svg.selectAll(".node")
              .data(nodes)
              .enter()
              .append("g")
              .attr("class", "node")
              .call(d3.drag()
                      .on("start", dragstarted)
                      .on("drag", dragged)
                      //.on("end", dragended)
              );

              let div = d3.select("body").append("div")	
                .attr("class", "tooltip")				
                .style("opacity", 0);

          node.append("circle")
              .attr("r", 18)
              .style("fill", function (d, i) {return colors(i);}).on("mouseover", function(d) {		
                    div.style("opacity", .9);	
      div.html("Овог: " + d.lname
      + "</br>" + "Нэр: " + d.name
      + "</br>" + "Регистр: " + d.register
      + "</br>" + "Нас: " + d.dob
      + "</br>" + "Хүйс: " + d.label)	
      .style("left", (d3.event.pageX) + "px")		
      .style("top", (d3.event.pageY - 28) + "px");	
      })					
    .on("mouseout", function(d) {		
      div.style("opacity", 0);	
    });

      
          node.append("title")
              .text(function (d) {return d.id;});
      
          node.append("text")
              .attr("dy", 0)
              .attr("dx", -5)
              .style("fill", "#FFFFFF")
              .style("font-size", "14")
              .style("opacity", "1")
              .text(function (d) {return d.name;});
              // .text(function (d) {return d.name+":"+d.label;});
      
          simulation
              .nodes(nodes)
              .on("tick", ticked);
      
          simulation.force("link")
              .links(links);
      }
      
      function ticked() {
          link
              .attr("x1", function (d) {return d.source.x;})
              .attr("y1", function (d) {return d.source.y;})
              .attr("x2", function (d) {return d.target.x;})
              .attr("y2", function (d) {return d.target.y;});
      
          node
              .attr("transform", function (d) {return "translate(" + d.x + ", " + d.y + ")";});
      
          edgepaths.attr('d', function (d) {
              return 'M ' + d.source.x + ' ' + d.source.y + ' L ' + d.target.x + ' ' + d.target.y;
          });
      
          edgelabels.attr('transform', function (d) {
              if (d.target.x < d.source.x) {
                  var bbox = this.getBBox();
      
                  rx = bbox.x + bbox.width / 2;
                  ry = bbox.y + bbox.height / 2;
                  return 'rotate(180 ' + rx + ' ' + ry + ')';
              }
              else {
                  return 'rotate(0)';
              }
          });
      }
      
      function dragstarted(d) {
          if (!d3.event.active) simulation.alphaTarget(0.3).restart()
          d.fx = d.x;
          d.fy = d.y;
      }
      
      function dragged(d) {
          d.fx = d3.event.x;
          d.fy = d3.event.y;
      }
      
      function dragended(d) {
         if (!d3.event.active) simulation.alphaTarget(0);
         d.fx = undefined;
         d.fy = undefined;
      }
      
      </script>
    </div>
  </div>
</div>
</main>

<footer>
    <%- include('../partials/footer'); %>
</footer>

</body>
</html>
